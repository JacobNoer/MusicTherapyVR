using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class PianoModel
{
    [RealtimeProperty(1, true, true)] private string _note;

    [RealtimeProperty(2, true, true)] private bool _trigger;

    [RealtimeProperty(3, true, true)] private int _hit;
}


/* ----- Begin Normal Autogenerated Code ----- */
public partial class PianoModel : RealtimeModel {
    public string note {
        get {
            return _noteProperty.value;
        }
        set {
            if (_noteProperty.value == value) return;
            _noteProperty.value = value;
            InvalidateReliableLength();
            FireNoteDidChange(value);
        }
    }
    
    public bool trigger {
        get {
            return _triggerProperty.value;
        }
        set {
            if (_triggerProperty.value == value) return;
            _triggerProperty.value = value;
            InvalidateReliableLength();
            FireTriggerDidChange(value);
        }
    }
    
    public int hit {
        get {
            return _hitProperty.value;
        }
        set {
            if (_hitProperty.value == value) return;
            _hitProperty.value = value;
            InvalidateReliableLength();
            FireHitDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(PianoModel model, T value);
    public event PropertyChangedHandler<string> noteDidChange;
    public event PropertyChangedHandler<bool> triggerDidChange;
    public event PropertyChangedHandler<int> hitDidChange;
    
    public enum PropertyID : uint {
        Note = 1,
        Trigger = 2,
        Hit = 3,
    }
    
    #region Properties
    
    private ReliableProperty<string> _noteProperty;
    
    private ReliableProperty<bool> _triggerProperty;
    
    private ReliableProperty<int> _hitProperty;
    
    #endregion
    
    public PianoModel() : base(null) {
        _noteProperty = new ReliableProperty<string>(1, _note);
        _triggerProperty = new ReliableProperty<bool>(2, _trigger);
        _hitProperty = new ReliableProperty<int>(3, _hit);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _noteProperty.UnsubscribeCallback();
        _triggerProperty.UnsubscribeCallback();
        _hitProperty.UnsubscribeCallback();
    }
    
    private void FireNoteDidChange(string value) {
        try {
            noteDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireTriggerDidChange(bool value) {
        try {
            triggerDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireHitDidChange(int value) {
        try {
            hitDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _noteProperty.WriteLength(context);
        length += _triggerProperty.WriteLength(context);
        length += _hitProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _noteProperty.Write(stream, context);
        writes |= _triggerProperty.Write(stream, context);
        writes |= _hitProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.Note: {
                    changed = _noteProperty.Read(stream, context);
                    if (changed) FireNoteDidChange(note);
                    break;
                }
                case (uint) PropertyID.Trigger: {
                    changed = _triggerProperty.Read(stream, context);
                    if (changed) FireTriggerDidChange(trigger);
                    break;
                }
                case (uint) PropertyID.Hit: {
                    changed = _hitProperty.Read(stream, context);
                    if (changed) FireHitDidChange(hit);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _note = note;
        _trigger = trigger;
        _hit = hit;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
