using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;

using Normal.Realtime.Serialization;
[RealtimeModel]

public partial class pianoLoopModel
{
    [RealtimeProperty(1, true, true)]
    bool _pianoPlay;

    [RealtimeProperty(2, true, true)]
    Color _color;
}


/* ----- Begin Normal Autogenerated Code ----- */
public partial class pianoLoopModel : RealtimeModel {
    public bool pianoPlay {
        get {
            return _cache.LookForValueInCache(_pianoPlay, entry => entry.pianoPlaySet, entry => entry.pianoPlay);
        }
        set {
            if (this.pianoPlay == value) return;
            _cache.UpdateLocalCache(entry => { entry.pianoPlaySet = true; entry.pianoPlay = value; return entry; });
            InvalidateReliableLength();
            FirePianoPlayDidChange(value);
        }
    }
    
    public UnityEngine.Color color {
        get {
            return _cache.LookForValueInCache(_color, entry => entry.colorSet, entry => entry.color);
        }
        set {
            if (this.color == value) return;
            _cache.UpdateLocalCache(entry => { entry.colorSet = true; entry.color = value; return entry; });
            InvalidateReliableLength();
            FireColorDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(pianoLoopModel model, T value);
    public event PropertyChangedHandler<bool> pianoPlayDidChange;
    public event PropertyChangedHandler<UnityEngine.Color> colorDidChange;
    
    private struct LocalCacheEntry {
        public bool pianoPlaySet;
        public bool pianoPlay;
        public bool colorSet;
        public UnityEngine.Color color;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
    
    public enum PropertyID : uint {
        PianoPlay = 1,
        Color = 2,
    }
    
    public pianoLoopModel() : this(null) {
    }
    
    public pianoLoopModel(RealtimeModel parent) : base(null, parent) {
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        UnsubscribeClearCacheCallback();
    }
    
    private void FirePianoPlayDidChange(bool value) {
        try {
            pianoPlayDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireColorDidChange(UnityEngine.Color value) {
        try {
            colorDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        int length = 0;
        if (context.fullModel) {
            FlattenCache();
            length += WriteStream.WriteVarint32Length((uint)PropertyID.PianoPlay, _pianoPlay ? 1u : 0u);
            length += WriteStream.WriteBytesLength((uint)PropertyID.Color, WriteStream.ColorToBytesLength());
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.pianoPlaySet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.PianoPlay, entry.pianoPlay ? 1u : 0u);
            }
            if (entry.colorSet) {
                length += WriteStream.WriteBytesLength((uint)PropertyID.Color, WriteStream.ColorToBytesLength());
            }
        }
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var didWriteProperties = false;
        
        if (context.fullModel) {
            stream.WriteVarint32((uint)PropertyID.PianoPlay, _pianoPlay ? 1u : 0u);
            stream.WriteBytes((uint)PropertyID.Color, WriteStream.ColorToBytes(_color));
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.pianoPlaySet || entry.colorSet) {
                _cache.PushLocalCacheToInflight(context.updateID);
                ClearCacheOnStreamCallback(context);
            }
            if (entry.pianoPlaySet) {
                stream.WriteVarint32((uint)PropertyID.PianoPlay, entry.pianoPlay ? 1u : 0u);
                didWriteProperties = true;
            }
            if (entry.colorSet) {
                stream.WriteBytes((uint)PropertyID.Color, WriteStream.ColorToBytes(entry.color));
                didWriteProperties = true;
            }
            
            if (didWriteProperties) InvalidateReliableLength();
        }
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.PianoPlay: {
                    bool previousValue = _pianoPlay;
                    _pianoPlay = (stream.ReadVarint32() != 0);
                    bool pianoPlayExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.pianoPlaySet);
                    if (!pianoPlayExistsInChangeCache && _pianoPlay != previousValue) {
                        FirePianoPlayDidChange(_pianoPlay);
                    }
                    break;
                }
                case (uint)PropertyID.Color: {
                    UnityEngine.Color previousValue = _color;
                    _color = ReadStream.ColorFromBytes(stream.ReadBytes());
                    bool colorExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.colorSet);
                    if (!colorExistsInChangeCache && _color != previousValue) {
                        FireColorDidChange(_color);
                    }
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
        }
    }
    
    #region Cache Operations
    
    private StreamEventDispatcher _streamEventDispatcher;
    
    private void FlattenCache() {
        _pianoPlay = pianoPlay;
        _color = color;
        _cache.Clear();
    }
    
    private void ClearCache(uint updateID) {
        _cache.RemoveUpdateFromInflight(updateID);
    }
    
    private void ClearCacheOnStreamCallback(StreamContext context) {
        if (_streamEventDispatcher != context.dispatcher) {
            UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
        }
        _streamEventDispatcher = context.dispatcher;
        _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
    }
    
    private void UnsubscribeClearCacheCallback() {
        if (_streamEventDispatcher != null) {
            _streamEventDispatcher.RemoveStreamCallback(ClearCache);
            _streamEventDispatcher = null;
        }
    }
    
    #endregion
}
/* ----- End Normal Autogenerated Code ----- */
