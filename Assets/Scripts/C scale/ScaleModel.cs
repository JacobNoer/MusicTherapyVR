using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class ScaleModel
{
[RealtimeProperty(1, true, true)]
    private float _gain;
    [RealtimeProperty(2, true, true)]
    private bool _echo;
}


/* ----- Begin Normal Autogenerated Code ----- */
public partial class ScaleModel : RealtimeModel {
    public float gain {
        get {
            return _cache.LookForValueInCache(_gain, entry => entry.gainSet, entry => entry.gain);
        }
        set {
            if (this.gain == value) return;
            _cache.UpdateLocalCache(entry => { entry.gainSet = true; entry.gain = value; return entry; });
            InvalidateReliableLength();
            FireGainDidChange(value);
        }
    }
    
    public bool echo {
        get {
            return _cache.LookForValueInCache(_echo, entry => entry.echoSet, entry => entry.echo);
        }
        set {
            if (this.echo == value) return;
            _cache.UpdateLocalCache(entry => { entry.echoSet = true; entry.echo = value; return entry; });
            InvalidateReliableLength();
            FireEchoDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(ScaleModel model, T value);
    public event PropertyChangedHandler<float> gainDidChange;
    public event PropertyChangedHandler<bool> echoDidChange;
    
    private struct LocalCacheEntry {
        public bool gainSet;
        public float gain;
        public bool echoSet;
        public bool echo;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
    
    public enum PropertyID : uint {
        Gain = 1,
        Echo = 2,
    }
    
    public ScaleModel() : this(null) {
    }
    
    public ScaleModel(RealtimeModel parent) : base(null, parent) {
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        UnsubscribeClearCacheCallback();
    }
    
    private void FireGainDidChange(float value) {
        try {
            gainDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireEchoDidChange(bool value) {
        try {
            echoDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        int length = 0;
        if (context.fullModel) {
            FlattenCache();
            length += WriteStream.WriteFloatLength((uint)PropertyID.Gain);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.Echo, _echo ? 1u : 0u);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.gainSet) {
                length += WriteStream.WriteFloatLength((uint)PropertyID.Gain);
            }
            if (entry.echoSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.Echo, entry.echo ? 1u : 0u);
            }
        }
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var didWriteProperties = false;
        
        if (context.fullModel) {
            stream.WriteFloat((uint)PropertyID.Gain, _gain);
            stream.WriteVarint32((uint)PropertyID.Echo, _echo ? 1u : 0u);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.gainSet || entry.echoSet) {
                _cache.PushLocalCacheToInflight(context.updateID);
                ClearCacheOnStreamCallback(context);
            }
            if (entry.gainSet) {
                stream.WriteFloat((uint)PropertyID.Gain, entry.gain);
                didWriteProperties = true;
            }
            if (entry.echoSet) {
                stream.WriteVarint32((uint)PropertyID.Echo, entry.echo ? 1u : 0u);
                didWriteProperties = true;
            }
            
            if (didWriteProperties) InvalidateReliableLength();
        }
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.Gain: {
                    float previousValue = _gain;
                    _gain = stream.ReadFloat();
                    bool gainExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.gainSet);
                    if (!gainExistsInChangeCache && _gain != previousValue) {
                        FireGainDidChange(_gain);
                    }
                    break;
                }
                case (uint)PropertyID.Echo: {
                    bool previousValue = _echo;
                    _echo = (stream.ReadVarint32() != 0);
                    bool echoExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.echoSet);
                    if (!echoExistsInChangeCache && _echo != previousValue) {
                        FireEchoDidChange(_echo);
                    }
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
        }
    }
    
    #region Cache Operations
    
    private StreamEventDispatcher _streamEventDispatcher;
    
    private void FlattenCache() {
        _gain = gain;
        _echo = echo;
        _cache.Clear();
    }
    
    private void ClearCache(uint updateID) {
        _cache.RemoveUpdateFromInflight(updateID);
    }
    
    private void ClearCacheOnStreamCallback(StreamContext context) {
        if (_streamEventDispatcher != context.dispatcher) {
            UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
        }
        _streamEventDispatcher = context.dispatcher;
        _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
    }
    
    private void UnsubscribeClearCacheCallback() {
        if (_streamEventDispatcher != null) {
            _streamEventDispatcher.RemoveStreamCallback(ClearCache);
            _streamEventDispatcher = null;
        }
    }
    
    #endregion
}
/* ----- End Normal Autogenerated Code ----- */
