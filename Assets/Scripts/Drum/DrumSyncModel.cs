using System.Collections;
using System.Collections.Generic;
using UnityEngine;

using Normal.Realtime;
using Normal.Realtime.Serialization;
[RealtimeModel]
public partial class DrumSyncModel
{
    [RealtimeProperty(1, true, true)]
    private bool _play;
    [RealtimeProperty(2, true, true)]
    private Color _color;
}


/* ----- Begin Normal Autogenerated Code ----- */
public partial class DrumSyncModel : RealtimeModel
{
    public bool play
    {
        get
        {
            return _cache.LookForValueInCache(_play, entry => entry.playSet, entry => entry.play);
        }
        set
        {
            if (this.play == value) return;
            _cache.UpdateLocalCache(entry => { entry.playSet = true; entry.play = value; return entry; });
            InvalidateReliableLength();
            FirePlayDidChange(value);
        }
    }

    public UnityEngine.Color color
    {
        get
        {
            return _cache.LookForValueInCache(_color, entry => entry.colorSet, entry => entry.color);
        }
        set
        {
            if (this.color == value) return;
            _cache.UpdateLocalCache(entry => { entry.colorSet = true; entry.color = value; return entry; });
            InvalidateReliableLength();
            FireColorDidChange(value);
        }
    }

    public delegate void PropertyChangedHandler<in T>(DrumSyncModel model, T value);
    public event PropertyChangedHandler<bool> playDidChange;
    public event PropertyChangedHandler<UnityEngine.Color> colorDidChange;

    private struct LocalCacheEntry
    {
        public bool playSet;
        public bool play;
        public bool colorSet;
        public UnityEngine.Color color;
    }

    private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();

    public enum PropertyID : uint
    {
        Play = 1,
        Color = 2,
    }

    public DrumSyncModel() : this(null)
    {
    }

    public DrumSyncModel(RealtimeModel parent) : base(null, parent)
    {
    }

    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent)
    {
        UnsubscribeClearCacheCallback();
    }

    private void FirePlayDidChange(bool value)
    {
        try
        {
            playDidChange?.Invoke(this, value);
        }
        catch (System.Exception exception)
        {
            UnityEngine.Debug.LogException(exception);
        }
    }

    private void FireColorDidChange(UnityEngine.Color value)
    {
        try
        {
            colorDidChange?.Invoke(this, value);
        }
        catch (System.Exception exception)
        {
            UnityEngine.Debug.LogException(exception);
        }
    }

    protected override int WriteLength(StreamContext context)
    {
        int length = 0;
        if (context.fullModel)
        {
            FlattenCache();
            length += WriteStream.WriteVarint32Length((uint)PropertyID.Play, _play ? 1u : 0u);
            length += WriteStream.WriteBytesLength((uint)PropertyID.Color, WriteStream.ColorToBytesLength());
        }
        else if (context.reliableChannel)
        {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.playSet)
            {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.Play, entry.play ? 1u : 0u);
            }
            if (entry.colorSet)
            {
                length += WriteStream.WriteBytesLength((uint)PropertyID.Color, WriteStream.ColorToBytesLength());
            }
        }
        return length;
    }

    protected override void Write(WriteStream stream, StreamContext context)
    {
        var didWriteProperties = false;

        if (context.fullModel)
        {
            stream.WriteVarint32((uint)PropertyID.Play, _play ? 1u : 0u);
            stream.WriteBytes((uint)PropertyID.Color, WriteStream.ColorToBytes(_color));
        }
        else if (context.reliableChannel)
        {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.playSet || entry.colorSet)
            {
                _cache.PushLocalCacheToInflight(context.updateID);
                ClearCacheOnStreamCallback(context);
            }
            if (entry.playSet)
            {
                stream.WriteVarint32((uint)PropertyID.Play, entry.play ? 1u : 0u);
                didWriteProperties = true;
            }
            if (entry.colorSet)
            {
                stream.WriteBytes((uint)PropertyID.Color, WriteStream.ColorToBytes(entry.color));
                didWriteProperties = true;
            }

            if (didWriteProperties) InvalidateReliableLength();
        }
    }

    protected override void Read(ReadStream stream, StreamContext context)
    {
        while (stream.ReadNextPropertyID(out uint propertyID))
        {
            switch (propertyID)
            {
                case (uint)PropertyID.Play:
                    {
                        bool previousValue = _play;
                        _play = (stream.ReadVarint32() != 0);
                        bool playExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.playSet);
                        if (!playExistsInChangeCache && _play != previousValue)
                        {
                            FirePlayDidChange(_play);
                        }
                        break;
                    }
                case (uint)PropertyID.Color:
                    {
                        UnityEngine.Color previousValue = _color;
                        _color = ReadStream.ColorFromBytes(stream.ReadBytes());
                        bool colorExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.colorSet);
                        if (!colorExistsInChangeCache && _color != previousValue)
                        {
                            FireColorDidChange(_color);
                        }
                        break;
                    }
                default:
                    {
                        stream.SkipProperty();
                        break;
                    }
            }
        }
    }

    #region Cache Operations

    private StreamEventDispatcher _streamEventDispatcher;

    private void FlattenCache()
    {
        _play = play;
        _color = color;
        _cache.Clear();
    }

    private void ClearCache(uint updateID)
    {
        _cache.RemoveUpdateFromInflight(updateID);
    }

    private void ClearCacheOnStreamCallback(StreamContext context)
    {
        if (_streamEventDispatcher != context.dispatcher)
        {
            UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
        }
        _streamEventDispatcher = context.dispatcher;
        _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
    }

    private void UnsubscribeClearCacheCallback()
    {
        if (_streamEventDispatcher != null)
        {
            _streamEventDispatcher.RemoveStreamCallback(ClearCache);
            _streamEventDispatcher = null;
        }
    }

    #endregion
}
/* ----- End Normal Autogenerated Code ----- */
